// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using System.Threading.Tasks;
using CoreGraphics;
using Foundation;
using NewsChronicle.Data;
using NewsChronicle.Data.Constants;
using NewsChronicle.Data.Enum;
using NewsChronicle.Data.Interfaces;
using NewsChronicle.Data.QueryParameters;
using NewsChronicle.Data.Utils;
using NewsChronicle.Data.ViewModel;
using NewsChronicle.Services;
using UIKit;

namespace NewsChronicle
{
    public partial class ArticleTableViewController : UITableViewController
    {
        #region Properties

        private readonly ArticleListViewModel _viewModel;

        private UISearchController _searchController;

        private UIRefreshControl _refreshControl;

        private UIView _noResultsFoundView;

        private nint _selectedArticlePrioritySegment; // represents what the user is looking for, top headlines or all articles

        #endregion

        #region Constructor(s)

        public ArticleTableViewController(IntPtr handle) : base(handle)
        {
            ViewModelLocator.Instance.RegisterSingleton<IAlertService, AlertService>();
            ViewModelLocator.Instance.RegisterSingleton<IDBFileAccessHelper, DBFileAccessHelper>();
            _viewModel = ViewModelLocator.Instance.GetInstanceViewModelInstance<ArticleListViewModel>();
        }

        #endregion

        #region UIMethods

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            SetUpView();

            _viewModel.PropertyChanged += ViewModel_PropertiesChanged;
            _viewModel.DataSetChanged += ViewModelDataSet_Changed;
            _viewModel.OnAppearing();

            //loads up articles with the default language setting for this app
            var newQueryParams = new MyQueryParams
            {
                Language = _viewModel.AppArticleLanguage
            };
            _viewModel.QueryParams = newQueryParams;
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            _refreshControl.ValueChanged += RefreshArticles;

            _viewModel.DataSetChanged -= ViewModelDataSet_Changed;
            _viewModel.DataSetChanged += ViewModelDataSet_Changed;

            var newQueryParams = MyQueryParams.GetCopy(_viewModel.QueryParams);

            // when the language has been changed in the settings menu, every article is reloaded
            if (!_viewModel.AppIsFirstTimeLoaded)
            {
                if (newQueryParams.Language != _viewModel.AppArticleLanguage)
                {
                    newQueryParams.Language = _viewModel.AppArticleLanguage;

                    articleCountryImage.Image = UIImage.FromBundle(Utilities.
                                                                   GetCountryIconIdentifier(_viewModel.AppArticleLanguage));

                    _viewModel.QueryParams = newQueryParams;    //forces a refresh of the articles
                }
            }
        }

        public override void ViewDidUnload()
        {
            base.ViewDidUnload();
            _viewModel.PropertyChanged -= ViewModel_PropertiesChanged;
            _refreshControl.ValueChanged -= RefreshArticles;
            _viewModel.DataSetChanged -= ViewModelDataSet_Changed;
            _viewModel.OnDisappearing();
        }

        private void SetUpView()
        {
            _refreshControl = new UIRefreshControl();
            RefreshControl = _refreshControl;

            TableView.RowHeight = 105;
            TableView.TableFooterView = new UIView(CGRect.Empty);

            articleCountryImage.Image = UIImage.FromBundle(Utilities.
                                                           GetCountryIconIdentifier(_viewModel.AppArticleLanguage));

            articlePriorityFilter.ValueChanged += ArticlePriorityFilter_ValueChanged;
            _selectedArticlePrioritySegment = articlePriorityFilter.SelectedSegment;

            _searchController = new UISearchController((UIViewController)null);
            _searchController.SearchBar.TextChanged += SearchBar_TextChanged;
            _searchController.SearchBar.SelectedScopeButtonIndexChanged += SearchBar_ScopeButtonIndexChanged;
            _searchController.SearchBar.Placeholder = "Search for articles";
            _searchController.SearchBar.AutocapitalizationType = UITextAutocapitalizationType.None;
            _searchController.SearchBar.ReturnKeyType = UIReturnKeyType.Done;

            DefinesPresentationContext = true;
            _searchController.DimsBackgroundDuringPresentation = false;

            if (_selectedArticlePrioritySegment == 0) // top headlines
            {
                _searchController.SearchBar.ScopeButtonTitles = Enum.GetNames(typeof(ArticleSearchCategory));
            }
            else // show all articles, not only headlines
            {
                _searchController.SearchBar.ScopeButtonTitles = Enum.GetNames(typeof(ArticleSearchSortBy));
            }

            if (UIDevice.CurrentDevice.CheckSystemVersion(11, 0))
            {
                // for iOS 11 and later, place the search bar in the navigation bar
                base.NavigationItem.SearchController = _searchController;

                // make the search bar always visible
                base.NavigationItem.HidesSearchBarWhenScrolling = false;
            }
            else
            {
                // for iOS 10 and earlier, place the search controller's search bar in the table view's header
                TableView.TableHeaderView = _searchController.SearchBar;
            }
            _searchController.SearchBar.SizeToFit();

            _noResultsFoundView = ConstructNoResultsFoundView();
        }

        private UIView ConstructNoResultsFoundView()
        {
            var noResultsFoundView = new UIView();
            var noResultsFoundLabel = new UILabel(new CGRect(0, 0, TableView.Bounds.Size.Width, TableView.Bounds.Size.Height));
            noResultsFoundLabel.Text = "No results found";
            noResultsFoundLabel.TextColor = UIColor.Black;
            noResultsFoundLabel.TextAlignment = UITextAlignment.Center;
            noResultsFoundView.AddSubview(noResultsFoundLabel);
            return noResultsFoundView;
        }

        private void ShowNoResultsFoundLabel(bool showLabel)
        {
            if (_viewModel.AppIsFirstTimeLoaded == false)
            {
                if (showLabel)
                {
                    TableView.SeparatorStyle = UITableViewCellSeparatorStyle.None;
                    TableView.AddSubview(_noResultsFoundView);
                }
                else
                {
                    _noResultsFoundView.RemoveFromSuperview();
                }
            }
        }

        private void ViewModelDataSet_Changed(object sender, EventArgs e)
        {
            TableView.ReloadData();
        }

        private void RefreshArticles(object sender, EventArgs e)
        {
            _viewModel.ForceRefresh();
        }

        /// <summary>
        /// Listens to what changed in the viewmodel
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ViewModel_PropertiesChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            switch (e.PropertyName)
            {
                case nameof(ArticleListViewModel.IsBusy):
                    {
                        if(_viewModel.IsBusy)
                        {
                            _refreshControl.BeginRefreshing();
                        }
                        else
                        {
                            _refreshControl.EndRefreshing();
                        }
                        break;
                    }
            }
        }

        #endregion

        #region UITableViewDelegate

        public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            _viewModel.SelectedArticle = _viewModel.ArticleList[indexPath.Row];
            PerformSegue(Constants.ArticleDetailPageSegueIdentifier, this);
        }

        #endregion

        #region UITableViewDataSource

        public override nint RowsInSection(UITableView tableView, nint section)
        {
            return _viewModel.ArticleList.Count;
        }

        public override nint NumberOfSections(UITableView tableView)
        {
            var numberOfSeactions = 0;

            // if there is any articles to display
            if (_viewModel.ArticleList.Count > 0)
            {
                ShowNoResultsFoundLabel(false);
                TableView.SeparatorStyle = UITableViewCellSeparatorStyle.SingleLine;
                numberOfSeactions = 1;
            }
            // if there are no articles, display "No results found" as background to tableview
            else
            {
                ShowNoResultsFoundLabel(!_viewModel.IsBusy);
            }

            return numberOfSeactions;
        }

        public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            var cell = TableView.DequeueReusableCell(nameof(ArticleCell)) as ArticleCell ?? new UITableViewCell(UITableViewCellStyle.Default, nameof(ArticleCell)) as ArticleCell;
            cell.ArticleTitle.Text = _viewModel.ArticleList[indexPath.Row].Title;
            cell.ArticleContentPreview.Text = _viewModel.ArticleList[indexPath.Row].Description;
            cell.ArticlePublishDate.Text = _viewModel.ArticleList[indexPath.Row].PublishedAt;
            cell.ArticleSourceName.Text = _viewModel.ArticleList[indexPath.Row].SourceName;
            cell.ArticleImage.Image = null;
            Task.Run(async () =>
            {
                var articleImage = await IOSUtilities.FromUrl(_viewModel.ArticleList[indexPath.Row].UrlToArticleImage);
                InvokeOnMainThread(() =>
                {
                    cell.ArticleImage.Image = articleImage;
                });
            });
            return cell;
        }

        #endregion

        #region SearchController

        private void SearchBar_ScopeButtonIndexChanged(object sender, UISearchBarButtonIndexEventArgs e)
        {
            var newQueryParams = MyQueryParams.GetCopy(_viewModel.QueryParams);
            string scope = _searchController.SearchBar.ScopeButtonTitles[e.SelectedScope].ToLower();
            if (_selectedArticlePrioritySegment == 0) // user looks for top headlines only
            {
                if (scope == "all")
                {
                    newQueryParams.Category = string.Empty;
                }
                else
                {
                    newQueryParams.Category = scope;
                }
            }
            else
            {
                if (scope == "newest")
                {
                    newQueryParams.SortBy = string.Empty;
                }
                else
                {
                    newQueryParams.SortBy = scope;
                }
            }
            if (!(_viewModel.ArticleList.Count > 0))
            {
                newQueryParams.KeywordsOrPhrases = string.Empty;
                _searchController.SearchBar.Text = string.Empty;
            }
            _viewModel.QueryParams = newQueryParams;
        }

        private void SearchBar_TextChanged(object sender, UISearchBarTextChangedEventArgs e)
        {
            FilterContentForSearchText(_searchController.SearchBar.Text);
        }

        #endregion

        #region SearchHelperMethods

        private void FilterContentForSearchText(string text)
        {
            var newQueryParams = MyQueryParams.GetCopy(_viewModel.QueryParams);
            newQueryParams.KeywordsOrPhrases = text;
            _viewModel.QueryParams = newQueryParams;
        }

        private void ArticlePriorityFilter_ValueChanged(object sender, EventArgs e)
        {
            var newQueryParams = MyQueryParams.GetCopy(_viewModel.QueryParams);
            _selectedArticlePrioritySegment = articlePriorityFilter.SelectedSegment;
            switch (_selectedArticlePrioritySegment)
            {
                case 0: // top headlines
                    {
                        _searchController.SearchBar.ScopeButtonTitles = Enum.GetNames(typeof(ArticleSearchSortBy));
                        newQueryParams.SortBy = string.Empty; // can't use this parameter with the /top-headlines request on this api
                        newQueryParams.KeywordsOrPhrases = string.Empty;
                        newQueryParams.ApiCallType = ArticleApiCall.TopHeadlines;
                        break;
                    }
                case 1: // all articles, not only headlines
                    {
                        _searchController.SearchBar.ScopeButtonTitles = Enum.GetNames(typeof(ArticleSearchSortBy));
                        if (string.IsNullOrWhiteSpace(_searchController.SearchBar.Text))
                        {
                            newQueryParams.KeywordsOrPhrases = Constants.KeywordWildCardForAllArticlesSearch;
                        }
                        newQueryParams.Category = string.Empty; // can't use this parameter with the /everything request on this api
                                                                //_queryParams.KeywordsOrPhrases = userPreferredTopicsKeywords // this query needs at least one keyword
                                                                // to search articles for
                                                                // might implement it in the future
                        newQueryParams.ApiCallType = ArticleApiCall.AllArticles;
                        break;
                    }
            }
            _viewModel.QueryParams = newQueryParams;
        }

        #endregion

        #region UIStoryboardSegue

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier == Constants.ArticleDetailPageSegueIdentifier)
            {
                var detailViewController = segue.DestinationViewController as DetailViewController;
                if (detailViewController != null)
                {
                    if (_viewModel.SelectedArticle != null)
                    {
                        detailViewController.SelectedArticle = _viewModel.SelectedArticle;
                    }
                }
            }
        }

        #endregion
    }
}
